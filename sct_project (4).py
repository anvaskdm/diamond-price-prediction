# -*- coding: utf-8 -*-
"""sct project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pTpAscP97UqdxLXGTKeur89q9mfMD0_H
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

import matplotlib.pyplot as plt



data = pd.read_csv("/content/diamondfinal_data.csv")


data.head()

data.columns

X = data[['carat', 'cut', 'color', 'clarity', 'depth', 'table', 'length',
       'height', 'width', 'price']]
Y = data['price']

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=0)

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
X_train.shape

X_test.shape

ann = tf.keras.models.Sequential()
ann.add(tf.keras.layers.Dense(units=9,activation="relu"))
ann.add(tf.keras.layers.Dense(units=32,activation="relu"))
ann.add(tf.keras.layers.Dense(units=32,activation="relu"))
ann.add(tf.keras.layers.Dense(units=1,activation=None))
ann.compile(optimizer="adam",loss="MSE",metrics=["mean_absolute_error"])
ann.fit(X_train,Y_train,batch_size=10,epochs = 20)

print("Evaluate on test data")
results = ann.evaluate(X_test, Y_test, batch_size=128)
print("test loss, test acc:", results)

print("Generate predictions for 3 samples")
predictions = ann.predict(X_test)
print("predictions shape:", predictions.shape)

a = []
for i in range(900):
  a.append(i)

plt.rcParams["figure.figsize"] = (25,10)
plt.scatter(a,predictions[100:1000])
plt.scatter(a,Y_test[100:1000])
plt.show()

a = []
for i in range(100):
  a.append(i)

plt.rcParams["figure.figsize"] = (25,10)
plt.plot(a,predictions[100:200])
plt.plot(a,Y_test[100:200])
plt.show()



ann.predict(np.reshape(np.array(X_test[1]),(-1,9)))

test_sample = np.reshape(np.array([0.23,0,1,5,61.5,	55.0,3.95,3.98,2.43]),(-1,9))

test_sample_transformed = sc.fit_transform(test_sample)

#y=ann.predict(test_sample_transformed)
#y[:20]
predictions[:50]

Y_test[:50]

test_sample1 = np.reshape(np.array([.7,1,2,3,64.5,57,5.57,5.53,3.58]),(-1,9))
test_sample_transformed1 = sc.transform(test_sample1)
ann.predict(test_sample_transformed1)